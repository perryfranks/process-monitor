package templates

import "procmon.perryfanks.nerd/internal/models"

// Card status based off exit code. Success/Error/Running
templ statusIcon(proc models.Process) {
	if proc.Finished {
		if proc.ExitStatus == 0 {
			<div class="tooltip">
				<i class="material-icons text-green-500">check</i>
				<span class="tooltiptext">Exit code: { proc.ExitStatusStr() }<br/>(Success)</span>
			</div>
		} else {
			<div class="tooltip">
				<i class="material-icons text-red-600">close</i>
				<span class="tooltiptext">Exit code: { proc.ExitStatusStr() }<br/>(Error)</span>
			</div>
		}
	} else {
		<div class="tooltip">
			<i class="material-icons text-gray-400">hourglass_empty</i>
			<span class="tooltiptext">Process running</span>
		</div>
	}
}

// Renders a list of processess as cards.
templ ProcessList(processes []models.Process) {
	for _, proc := range processes {
		<div class="mx-auto my-6 w-3/5 rounded-lg border-tGothicGreen bg-tPalePink px-4 py-2 shadow-md shadow-tGothicGreen">
			<div class="flex grow justify-center text-center">
				<h2 class="text-center text-xl font-bold ">{ proc.Name }</h2>
				<div class="flex w-full justify-end">
					@statusIcon(proc)
				</div>
			</div>
			<div class="flex grow">
				<div class="flex grow flex-col justify-start">
					<p class="text-gray-700">Workspace: { proc.Workspace }</p>
					<p class="text-gray-700">User: { proc.User }</p>
					<p class="text-gray-700">PID: { proc.Pid }</p>
				</div>
				<div class="flex grow flex-col justify-end text-end">
					<p class="text-gray-700">ID: { proc.IdString }</p>
					<p class="text-gray-700">Start: { proc.StartTime.Format("15:4:5 02/01/06") }</p>
					if proc.Finished {
						<p class="text-gray-700">End: { proc.FinishTime.Format("15:4:5 02/01/06") }</p>
					} else {
						<p class="h-4"></p>
					}
				</div>
			</div>
			if proc.Finished {
				<details class="flex grow flex-col justify-center">
					<summary class="text-center font-semibold  hover:text-tLavender active:text-tPink">Output:</summary>
					<pre class="border-1 mx-2 max-h-96 w-full overflow-scroll border-solid border-tGothicGreen bg-white">
						{ proc.CapturedOut }
					</pre>
				</details>
			}
		</div>
	}
}

templ PollProcessList(processes []models.Process, url string, trigger string, id string) {
	<!-- I think we only want the trigger to be set if the trigger isn't null -->
	<div
		class="m-4 w-full grow"
		hx-get={ url }
		if trigger != "" {
			hx-trigger={ trigger }
		}
	>
		@ProcessList(processes)
	</div>
}

templ FinishedProcessList(processes []models.Process) {
	<div class="m-4 w-full grow">
		@ProcessList(processes)
	</div>
}

templ FinishedPolledProcessList(processes []models.Process, trigger string, paused bool) {
	<div
		id="finished-procs-div"
		class="mt-3 flex w-full  grow flex-col justify-center text-center"
		if trigger != "" {
			hx-get="components/finishedprocs"
			hx-swap="outerHTML"
			hx-trigger={ trigger }
		}
	>
		@FinishedPolledProcessListInner(processes, trigger, paused)
	</div>
}

templ FinishedPolledProcessListInner(processes []models.Process, trigger string, paused bool) {
	<div>
		<h1 class="text-xl font-semibold text-tPalePink">
			Finished Processes:
		</h1>
	</div>
	<div class="flex w-10/12 justify-end  pr-16">
		<div class="inline-flex">
			<form hx-post="/components/set/finishedpollrate" hx-target="#finished-procs-div" hx-swap="outerHTML">
				<!-- Need this to submit I'm not sure they are -->
				<button class="flex items-center rounded-l-xl border border-gray-800 bg-tGothicGreen px-2 py-1 font-semibold text-tLilac shadow hover:text-tPink active:border-tPink active:text-tLavender " type="submit" name="auto" value="flip">
					<!-- This needs to be swappable -->
					if paused {
						<i class="material-icons mr-px">play</i>
						<span>Play</span>
					} else {
						<i class="material-icons mr-px">pause</i>
						<span>Pause</span>
					}
				</button>
			</form>
			<button type="button" class="flex items-center border border-gray-800 bg-tGothicGreen px-2 py-1 font-semibold text-tLilac shadow hover:text-tPink active:border-tPink active:text-tLavender" hx-get="components/finishedprocs" hx-target="#finished-procs-div" hx-swap="outerHTML" hx-trigger="click">
				<i class="material-icons mr-px">refresh</i>
				Refresh
			</button>
			<div class="flex justify-start">
				<button type="button" class="flex items-center rounded-r-xl border border-gray-800 bg-tGothicGreen px-2 py-1 font-semibold text-tLilac shadow hover:text-tPink active:border-tPink active:text-tLavender" hx-post="/components/clearfinished" hx-target="#finished-procs-div" hx-swap="outerHTML" hx-trigger="click">
					<i class="material-icons mr-px">clear_all</i>Clear
				</button>
			</div>
		</div>
	</div>
	<div class="mt-3 flex grow justify-center ">
		<!--@PollProcessList(processes, "components/finishedprocs", trigger, "finishedProcessList") -->
		@FinishedProcessList(processes)
	</div>
}
